[{"content":"Introduction\rHoshinoBot HoshinoBot是基于Python的开源通用QQ机器人框架，插件很多，魔改方便。\nLLOneBot\n旧有的go-cqhttp方案因为QQ协议的更新经常会出现冻结和无法登录的情况，无奈替换成了性能开销比较大的LLOneBot方案，目前非常稳定。\n由于QQ官方针对协议库的围追堵截, 不断更新加密方案, 我们已无力继续维护此项目. 建议Bot开发者尽快迁移至无头NTQQ项目\nHoshinoBot 部署\r直接照搬HoshiboBot文档了，部分修改以适配LLOneBot 环境 windows10\n安装下面的软件/工具\nPython 3.8：https://www.python.org/downloads/windows/ 不建议其他版本，如已安装其他版本Python，自行谷歌多Python共存 Git：https://git-scm.com/download/win VScode：https://code.visualstudio.com/Download 打开一个合适的文件夹，点击资源管理器左上角的 文件 -\u0026gt; 打开Windows Powershell\n输入以下命令克隆本仓库并安装依赖\n1 2 3 git clone https://github.com/Ice9Coffee/HoshinoBot.git cd HoshinoBot py -3.8 -m pip install -r requirements.txt 若此处有报错信息，请务必解决，将错误信息复制到谷歌搜索一般即可找到解决办法。\n若安装python依赖库时下载速度缓慢，可以尝试使用py -3.8 -m pip install -i https://pypi.tuna.tsinghua.edu.cn/simple -r requirements.txt\n回到资源管理器，进入hoshino文件夹，将config_example文件夹复制一份，重命名为config，然后右键使用VScode打开其中的__bot__.py，按照其中的注释说明进行编辑。\n如果您不清楚某项设置的作用，请保持默认。\n回到powershell，输入以下命令，启动 HoshinoBot\n1 py -3.8 run.py 若能看到日志INFO: Running on 127.0.0.1:8080，说明HoshinoBot启动成功。您可以忽略启动时的WARNING信息。如果出现ERROR，说明部分功能可能加载失败。\n至此，HoshinoBot的“大脑”已部署成功。接下来我们需要部署LLOneBot与NTQQ，作为HoshinoBot的“口”和“耳”，收发消息。\nLLOneBot 部署\r安装最新版ntqq https://im.qq.com/pcqq/index.shtml 安装LLOneBot https://github.com/super1207/install_llob/releases 下载 exe，双击运行即可，之后打开 QQ 的设置，看到了 LLOneBot 就代表安装成功了。 对接HoshinoBot 在QQ设置 -\u0026gt; LLOneBot中启用反向WebSocket服务并添加地址ws://127.0.0.1:8080/ws，然后保存。 正式运行 启动HoshinoBot与NTQQ后，私聊机器人发送在？，若机器人有回复，说明已经成功搭建起HoshinoBot啦！ 自用插件\r大部分已经被我改的面目全非，功能用法可能不同，仅做自我备份用，如有需要可以去插件库选用心仪的插件。\nbot_manager_web\rbot功能网页管理，可以分群开关功能，即生效，不需要重启HoshinoBot 插件项目地址： https://github.com/pcrbot/HosBotManagerWeb\naichat-chatGPT\raichat插件，可以利用chatGPT实现QQ机器人对话，支持上下文记忆，可用多种API不只限于openai 插件项目地址： https://github.com/Cosmos01/aichat-chatGPT 我使用的GPT 3.5免费API项目地址： https://github.com/chatanywhere/GPT_API_free\numa_plugin\r赛马娘插件，大佬维护得很好 插件项目地址： https://github.com/azmiao/uma_plugin\nBlue_Archive_HoshinoBot\r碧蓝档案的插件，很完美，不需要什么修改 插件项目地址： https://github.com/Cosmos01/Blue_Archive_HoshinoBot\ndailynews\r每日早报 插件项目地址：https://github.com/pcrbot/dailynews\nmusic\r点歌功能 插件项目地址： https://github.com/pcrbot/music LLOneBot方案有些问题\n在QQ设置 -\u0026gt; LLOneBot中填写音乐卡片签名地址：http://napcat-sign.wumiao.wang:2052/music_sign，并且只能发送网易云卡片，建议删除QQ音乐和咪咕音乐查找。 QQ音乐查询接口年久失修，可能需要自行寻找可用的 picfinder_take\r识图搜图插件 插件项目地址： https://github.com/pcrbot/picfinder_take 应该是我魔改最多的插件，主要问题是ntqq使用了新的图片协议，导致拿不到正确的图片地址，请自行摸索\numa_voi\r自写的赛马娘语音插件，主要工作量在解包与整理语音文件，到后期实际上不止赛马娘语音了233，遇到喜欢的就会加上。 插件项目地址： https://github.com/Yukari-Lily/uma_voi ","date":"2024-08-17T00:00:00+08:00","image":"https://yukari.pages.dev/post/hoshinobot/cover_hu5839442843588540394.jpg","permalink":"https://yukari.pages.dev/post/hoshinobot/","title":"HoshinoBot+LLOneBot部署QQ机器人"},{"content":"Introduction\r经历了一次服务器硬件的淘汰之后决定给自己写一些服务工具的备忘录以防硬盘爆炸重装时再踩一遍坑，在notion和一众博客方案中选择了部署方便的hugo+GitHub/Cloudflare的静态页面托管服务。遂有了这第一篇文章。\n好处是成本很低，不需要服务器甚至域名也可以不需要，维护全部交给大厂，搭建完之后每次新文章只需提交到Github便会刷新构建。不过不管是Github还是Cloudflare国内总会抽风，会不定时分地区的可用性下降。如果只是个人用，代理常开的情况下是无感的。\nFinal\r选用的hugo主题是hugo-theme-stack 安装Git与Hugo\r安装Git\rGit官网https://git-scm.com/downloads 一路下一步即可 安装Hugo\rGithub Releaseshttps://github.com/gohugoio/hugo/releases下载解压 务必选择extended版本，如：hugo_extended_0.132.2_windows-amd64.zip 放入指定目录如： D:\\tools\\hugo_extended\\hugo.exe 添加系统变量 win+R输入sysdm.cpl → 高级 → 环境变量 → 系统变量找到Path变量 → 编辑 → 新建 → 将hugo.exe的目录加入，如： D:\\tools\\hugo_extended 确认安装成功 cmd中输入hugo version,输出以下即为成功 1 2 C:\\Users\\User\u0026gt;hugo version hugo v0.132.1-1bde700dfc0770bb11eb8445aff1ab5abdccb46e+extended windows/amd64 BuildDate=2024-08-13T10:10:10Z VendorInfo=gohugoio 新建Hugo博客\r新建一个目录，用来存放博客的根目录，如： D:\\tools\\hugo，之后都将这个目录称为根目录。 cmd命令，其中blog可以自定义，也是生成的文件夹名 1 hugo new site blog 应用Hugo主题\r来到D:\\tools\\hugo\\blog文件夹下，cmd命令： 1 git clone https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack 配置\u0026amp;美化\r来到根目录\\themes\\hugo-theme-stack\\exampleSite文件夹下，将hugo.yaml文件复制至根目录下，如果根目录下有别的配置文件如hugo.toml/JSON，将其删掉。然后打开hugo.yaml，根据模板进行修改。\n其中favicon网站图标favicon.ico需要放到根目录\\static下，然后配置是favicon: /favicon.ico\n其中avatar侧栏头像avatar.png需要放到根目录\\assets\\img下，然后配置是src: img/avatar.png\n如果需要搜索和归档栏，需要在主题模板根目录\\themes\\hugo-theme-stack\\exampleSite\\content\\page中找到对应的.md文件并放到根目录同样的文件夹下如:根目录\\content\\page\\search\\index.md并按需修改\n接下来是样式的美化，供参考，根目录\\assets\\scss下新建custom.scss，并编辑：\n//---------------------------------------------------- // 页面基本配色 :root { // 全局顶部边距 --main-top-padding: 30px; // 全局卡片圆角 --card-border-radius: 25px; // 标签云卡片圆角 --tag-border-radius: 8px; // 卡片间距 --section-separation: 40px; // 全局字体大小 --article-font-size: 1.8rem; // 行内代码背景色 --code-background-color: #f8f8f8; // 行内代码前景色 --code-text-color: #e96900; // 暗色模式下样式 \u0026amp;[data-scheme=\u0026#34;dark\u0026#34;] { // 行内代码背景色 --code-background-color: #f8f8f814; // 行内代码前景色 --code-text-color: #e96900; // 暗黑模式下背景色 //--body-background: #000; // 暗黑模式下卡片背景色 //--card-background: hsl(225 13% 8% / 1); } } //------------------------------------------------------ // 修复引用块内容窄页面显示问题 a { word-break: break-all; } code { word-break: break-all; } //--------------------------------------------------- // 文章封面高度 .article-list article .article-image img { width: 100%; height: 200px !important; object-fit: cover; @include respond(md) { height: 250px !important; } @include respond(xl) { height: 285px !important; } } //-------------------------------------------------- // 文章内容图片圆角阴影 .article-page .main-article .article-content { img { max-width: 96% !important; height: auto !important; border-radius: 8px; } } //------------------------------------------------ // 文章内容引用块样式 .article-content { blockquote { border-left: 6px solid #d57b5e !important; background: #d57c5e56; } } // --------------------------------------- // 代码块样式修改 .highlight { max-width: 102% !important; background-color: var(--pre-background-color); padding: var(--card-padding); position: relative; border-radius: 20px; margin-left: -7px !important; margin-right: -12px; box-shadow: var(--shadow-l1) !important; \u0026amp;:hover { .copyCodeButton { opacity: 1; } } // keep Codeblocks LTR [dir=\u0026#34;rtl\u0026#34;] \u0026amp; { direction: ltr; } pre { margin: initial; padding: 0; margin: 0; width: auto; } } // light模式下的代码块样式调整 [data-scheme=\u0026#34;light\u0026#34;] .article-content .highlight { background-color: #fff9f3; } [data-scheme=\u0026#34;light\u0026#34;] .chroma { color: #ff6f00; background-color: #fff9f3cc; } //------------------------------------------- // 设置选中字体的区域背景颜色 //修改选中颜色 ::selection { color: #fff; background: #34495e; } a { text-decoration: none; color: var(--accent-color); \u0026amp;:hover { color: var(--accent-color-darker); } \u0026amp;.link { color: #4288b9ad; font-weight: 600; padding: 0 2px; text-decoration: none; cursor: pointer; \u0026amp;:hover { text-decoration: underline; } } } //------------------------------------------------- //文章封面高度更改 .article-list article .article-image img { width: 100%; height: 150px; object-fit: cover; @include respond(md) { height: 200px; } @include respond(xl) { height: 305px; } } //--------------------------------------------------- // 全局页面布局间距调整 .main-container { min-height: 100vh; align-items: flex-start; padding: 0 15px; gap: var(--section-separation); padding-top: var(--main-top-padding); @include respond(md) { padding: 0 37px; } } //-------------------------------------------------- //页面三栏宽度调整 .container { margin-left: auto; margin-right: auto; .left-sidebar { order: -3; max-width: var(--left-sidebar-max-width); } .right-sidebar { order: -1; max-width: var(--right-sidebar-max-width); /// Display right sidebar when min-width: lg @include respond(lg) { display: flex; } } \u0026amp;.extended { @include respond(md) { max-width: 1024px; --left-sidebar-max-width: 25%; --right-sidebar-max-width: 22% !important; } @include respond(lg) { max-width: 1280px; --left-sidebar-max-width: 20%; --right-sidebar-max-width: 30%; } @include respond(xl) { max-width: 1453px; //1536px; --left-sidebar-max-width: 15%; --right-sidebar-max-width: 25%; } } \u0026amp;.compact { @include respond(md) { --left-sidebar-max-width: 25%; max-width: 768px; } @include respond(lg) { max-width: 1024px; --left-sidebar-max-width: 20%; } @include respond(xl) { max-width: 1280px; } } } //------------------------------------------------------- //全局页面小图片样式微调 .article-list--compact article .article-image img { width: var(--image-size); height: var(--image-size); object-fit: cover; border-radius: 17%; } //---------------------------------------------------- //固定代码块的高度 .article-content { .highlight { padding: var(--card-padding); pre { width: auto; max-height: 20em; } } } //-------------------------------------------------- // 修改首页搜索框样式 .search-form.widget input { font-size: 1.5rem; padding: 44px 25px 19px; } //-------------------------------------------------- //归档页面双栏 /* 归档页面两栏 */ @media (min-width: 1024px) { .article-list--compact { display: grid; grid-template-columns: 1fr 1fr; background: none; box-shadow: none; gap: 1rem; article { background: var(--card-background); border: none; box-shadow: var(--shadow-l2); margin-bottom: 8px; border-radius: 16px; } } } 上传至Github\r在进行过一次hugo命令之后会在根目录\\public下构建静态网站，需要上传至Github的就是这一部分\n新建一个GitHub仓库，仓库名是Github用户名.github.io，如：user.github.io 与GitHub仓库关联，在根目录\\public下，依次输入以下cmd命令： 1 2 git init git remote add origin git@github.com:user/user.github.io.git 其中user改成自己的GitHub用户名 来到根目录\\public下，依次输入以下cmd命令： 1 2 3 git add . git commit -S -m \u0026#34;commit\u0026#34; git pull origin main 启用Github Pages\rGithub Pages需要公开仓库，如不想公开，可以新建私人仓库并跳过这一步\n来到GitHub仓库 → settings Pages → Deploy from a branch → 选择main分支 → Save 之后会进行自动构建，默认网址是https://user.github.io 启用Cloudflares Pages\r在Cloudflare登录后，Workers 和 Pages → 创建Pages → 连接到Git → 选择之前上传的Github仓库与分支main → 框架预设无 → 保存并部署。 之后会进行自动构建，默认网址是https://你的Pages名.pages.dev 日常写作\r如果能构建成功并打开网址，以后只需要在博客根目录下自行创建.md文件并用markdown写作即可，目录结构如下：\n1 2 3 4 5 6 content └── post └── my-first-post ├── index.md ├── image1.png └── image2.png 编辑时可以构建本地博客实时预览，在根目录下cmd命令：\n1 hugo server -D 默认网址http://localhost:1313/ 完成之后来到根目录下构建一次（不带server的命令会完全应用baseurl的参数，以在正式的网站上而不是localhost正确运行），cmd命令：\n1 hugo -D 最后来到根目录\\public下提交到Github，依次输入以下cmd命令：\n1 2 3 git add . git commit -S -m \u0026#34;commit\u0026#34; git pull origin main 之后Github Pages/Cloudflare Pages会自动重新构建，只需稍等就可以在网页看到了\n补充\r修改css样式后可能需要删除根目录\\resources\\_gen下所有文件重新构建才生效。 内容（post）不对时可能需要删除根目录\\public下所有文件重新构建，注意不要把.git文件夹删了。 ","date":"2024-08-16T00:00:00+08:00","image":"https://yukari.pages.dev/post/hugo+github/cover_hu16655137109415946513.png","permalink":"https://yukari.pages.dev/post/hugo+github/","title":"Hugo + Github Pages/Cloudflare Pages搭建个人博客"}]