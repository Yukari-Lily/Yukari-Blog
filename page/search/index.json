[{"content":"Introduction\rsearch\n","date":"2024-08-16T07:07:07+01:00","permalink":"https://yukari.pages.dev/post/test2/","title":"search"},{"content":"Introduction\r经历了一次服务器硬件的淘汰之后决定给自己写一些服务工具的备忘录，在notion和一众博客方案中选择了部署方便的hugo+GitHub/Cloudflare的静态页面托管服务。遂有了这篇文章及这页博客。\n好处是成本很低，不需要服务器甚至域名也可以不需要，维护全部交给大厂，搭建完之后每次新文章只需提交到Github便会刷新构建。不过不管是Github还是Cloudflare国内总会抽风，会不定时分地区的可用性下降。如果只是个人用，代理常开的情况下是无感的。\nFinal\r选用的hugo主题是hugo-theme-stack 安装Git与Hugo\r安装Git\rGit官网 一路下一步即可\n安装Hugo\rGithub Releases下载解压 务必选择extended版本，如：hugo_extended_0.132.2_windows-amd64.zip 放入指定目录如： D:\\tools\\hugo_extended\\hugo.exe 添加系统变量 win+R输入sysdm.cpl → 高级 → 环境变量 → 系统变量找到Path变量 → 编辑 → 新建 → 将hugo.exe的目录加入，如： D:\\tools\\hugo_extended 确认安装成功 cmd中输入hugo version,输出以下即为成功 1 2 C:\\Users\\User\u0026gt;hugo version hugo v0.132.1-1bde700dfc0770bb11eb8445aff1ab5abdccb46e+extended windows/amd64 BuildDate=2024-08-13T10:10:10Z VendorInfo=gohugoio 新建Hugo博客\r新建一个目录，用来存放博客的根目录，如： D:\\tools\\hugo，之后都将这个目录称为根目录。 cmd命令，其中blog可以自定义，也是生成的文件夹名 1 hugo new site blog 应用Hugo主题\r来到D:\\tools\\hugo\\blog文件夹下，cmd命令： 1 git clone https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack 配置\u0026amp;美化\r来到根目录\\themes\\hugo-theme-stack\\exampleSite文件夹下，将hugo.yaml文件复制至根目录下，如果根目录下有别的配置文件如hugo.toml/JSON，将其删掉。然后打开hugo.yaml，根据模板进行修改。 其中favicon网站图标favicon.ico需要放到根目录\\static下，然后配置是favicon: /favicon.ico 其中avatar侧栏头像avatar.png需要放到根目录\\assets\\img下，然后配置是src: img/avatar.png 如果需要搜索和归档栏，需要在主题模板根目录\\themes\\hugo-theme-stack\\exampleSite\\content\\page中找到对应的.md文件并放到根目录同样的文件夹下如:根目录\\content\\page\\search\\index.md并按需修改 接下来是样式的美化，供参考，根目录\\assets\\scss下新建custom.scss，并编辑： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 //---------------------------------------------------- // 页面基本配色 :root { // 全局顶部边距 --main-top-padding: 30px; // 全局卡片圆角 --card-border-radius: 25px; // 标签云卡片圆角 --tag-border-radius: 8px; // 卡片间距 --section-separation: 40px; // 全局字体大小 --article-font-size: 1.8rem; // 行内代码背景色 --code-background-color: #f8f8f8; // 行内代码前景色 --code-text-color: #e96900; // 暗色模式下样式 \u0026amp;[data-scheme=\u0026#34;dark\u0026#34;] { // 行内代码背景色 --code-background-color: #f8f8f814; // 行内代码前景色 --code-text-color: #e96900; // 暗黑模式下背景色 //--body-background: #000; // 暗黑模式下卡片背景色 //--card-background: hsl(225 13% 8% / 1); } } //------------------------------------------------------ // 修复引用块内容窄页面显示问题 a { word-break: break-all; } code { word-break: break-all; } //--------------------------------------------------- // 文章封面高度 .article-list article .article-image img { width: 100%; height: 200px !important; object-fit: cover; @include respond(md) { height: 250px !important; } @include respond(xl) { height: 285px !important; } } //-------------------------------------------------- // 文章内容图片圆角阴影 .article-page .main-article .article-content { img { max-width: 96% !important; height: auto !important; border-radius: 8px; } } //------------------------------------------------ // 文章内容引用块样式 .article-content { blockquote { border-left: 6px solid #d57b5e !important; background: #d57c5e56; } } // --------------------------------------- // 代码块样式修改 .highlight { max-width: 102% !important; background-color: var(--pre-background-color); padding: var(--card-padding); position: relative; border-radius: 20px; margin-left: -7px !important; margin-right: -12px; box-shadow: var(--shadow-l1) !important; \u0026amp;:hover { .copyCodeButton { opacity: 1; } } // keep Codeblocks LTR [dir=\u0026#34;rtl\u0026#34;] \u0026amp; { direction: ltr; } pre { margin: initial; padding: 0; margin: 0; width: auto; } } // light模式下的代码块样式调整 [data-scheme=\u0026#34;light\u0026#34;] .article-content .highlight { background-color: #fff9f3; } [data-scheme=\u0026#34;light\u0026#34;] .chroma { color: #ff6f00; background-color: #fff9f3cc; } //------------------------------------------- // 设置选中字体的区域背景颜色 //修改选中颜色 ::selection { color: #fff; background: #34495e; } a { text-decoration: none; color: var(--accent-color); \u0026amp;:hover { color: var(--accent-color-darker); } \u0026amp;.link { color: #4288b9ad; font-weight: 600; padding: 0 2px; text-decoration: none; cursor: pointer; \u0026amp;:hover { text-decoration: underline; } } } //------------------------------------------------- //文章封面高度更改 .article-list article .article-image img { width: 100%; height: 150px; object-fit: cover; @include respond(md) { height: 200px; } @include respond(xl) { height: 305px; } } //--------------------------------------------------- // 全局页面布局间距调整 .main-container { min-height: 100vh; align-items: flex-start; padding: 0 15px; gap: var(--section-separation); padding-top: var(--main-top-padding); @include respond(md) { padding: 0 37px; } } //-------------------------------------------------- //页面三栏宽度调整 .container { margin-left: auto; margin-right: auto; .left-sidebar { order: -3; max-width: var(--left-sidebar-max-width); } .right-sidebar { order: -1; max-width: var(--right-sidebar-max-width); /// Display right sidebar when min-width: lg @include respond(lg) { display: flex; } } \u0026amp;.extended { @include respond(md) { max-width: 1024px; --left-sidebar-max-width: 25%; --right-sidebar-max-width: 22% !important; } @include respond(lg) { max-width: 1280px; --left-sidebar-max-width: 20%; --right-sidebar-max-width: 30%; } @include respond(xl) { max-width: 1453px; //1536px; --left-sidebar-max-width: 15%; --right-sidebar-max-width: 25%; } } \u0026amp;.compact { @include respond(md) { --left-sidebar-max-width: 25%; max-width: 768px; } @include respond(lg) { max-width: 1024px; --left-sidebar-max-width: 20%; } @include respond(xl) { max-width: 1280px; } } } //------------------------------------------------------- //全局页面小图片样式微调 .article-list--compact article .article-image img { width: var(--image-size); height: var(--image-size); object-fit: cover; border-radius: 17%; } //---------------------------------------------------- //固定代码块的高度 .article-content { .highlight { padding: var(--card-padding); pre { width: auto; max-height: 20em; } } } //-------------------------------------------------- // 修改首页搜索框样式 .search-form.widget input { font-size: 1.5rem; padding: 44px 25px 19px; } //-------------------------------------------------- //归档页面双栏 /* 归档页面两栏 */ @media (min-width: 1024px) { .article-list--compact { display: grid; grid-template-columns: 1fr 1fr; background: none; box-shadow: none; gap: 1rem; article { background: var(--card-background); border: none; box-shadow: var(--shadow-l2); margin-bottom: 8px; border-radius: 16px; } } } 上传至Github\r在进行过一次hugo命令之后会在根目录\\public下构建静态网站\n新建一个GitHub仓库，仓库名是Github用户名.github.io，如：user.github.io 与GitHub仓库关联，在根目录\\public下，依次输入以下cmd命令： 1 2 git init git remote add origin git@github.com:user/user.github.io.git 其中user改成自己的GitHub用户名 来到根目录\\public下，依次输入以下cmd命令： 1 2 3 git add . git commit -S -m \u0026#34;commit\u0026#34; git pull origin main 启用Github Pages\rGithub Pages需要公开仓库，如不想公开，可以新建私人仓库并跳过下一步\n来到GitHub仓库 → settings Pages → \u0026ldquo;Deploy from a branch\u0026rdquo; → 选择main分支 → Save 之后会进行自动构建，默认网址是https://user.github.io 启用Cloudflares Pages\r在Cloudflare登录后，Workers 和 Pages 创建Pages → 连接到Git → 选择之前上传的Github仓库与分支main → 框架预设无 → 保存并部署。 之后会进行自动构建，默认网址是https://你的Pages名.pages.dev 日常写作\r如果能构建成功并打开网址，以后只需要在博客根目录下自行创建.md文件并用markdown写作即可，目录结构如下：\n1 2 3 4 5 6 content └── post └── my-first-post ├── index.md ├── image1.png └── image2.png 编辑时可以构建本地博客实时预览，在根目录下cmd命令：\n1 hugo server -D 默认网址http://localhost:1313/ 完成之后来到根目录下cmd命令：\n1 hugo -D 最后来到根目录\\public下提交到Github，依次输入以下cmd命令：\n1 2 3 git add . git commit -S -m \u0026#34;commit\u0026#34; git pull origin main 之后Github Pages/Cloudflare Pages会自动重新构建，只需稍等就可以在网页看到了\n","date":"2024-08-16T00:00:00+08:00","image":"https://yukari.pages.dev/post/test/avatar_hu17307941453048603343.png","permalink":"https://yukari.pages.dev/post/test/","title":"Hugo + Github Pages/Cloudflare Pages搭建个人博客"}]